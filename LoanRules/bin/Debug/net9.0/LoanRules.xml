<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>LoanRules</name></assembly>
<members>
<member name="M:LoanRules.DataMismatch.createMismatchAuditLog(LoanRules.Types.WebhookPayload,Microsoft.FSharp.Collections.FSharpList{LoanRules.Types.MismatchResult},System.Boolean)">
<summary>
 Creates a detailed audit log for mismatch detection
</summary>
</member>
<member name="M:LoanRules.DataMismatch.shouldCancelTransaction(Microsoft.FSharp.Collections.FSharpList{LoanRules.Types.MismatchResult})">
<summary>
 Determines if transaction should be cancelled based on mismatches
</summary>
</member>
<member name="M:LoanRules.DataMismatch.detectDataMismatches(LoanRules.Types.WebhookPayload)">
<summary>
 Comprehensive data mismatch detection
</summary>
</member>
<member name="M:LoanRules.DataMismatch.validateBusinessRules(LoanRules.Types.WebhookPayload)">
<summary>
 Business rule validation for payment processing
</summary>
</member>
<member name="M:LoanRules.DataMismatch.validateCrossFieldConsistency(LoanRules.Types.WebhookPayload)">
<summary>
 Cross-field validation for data consistency
</summary>
</member>
<member name="M:LoanRules.DataMismatch.validateTimestampLogic(System.String,System.DateTime)">
<summary>
 Validates timestamp for business logic consistency
</summary>
</member>
<member name="M:LoanRules.DataMismatch.validateTransactionIdPatterns(System.String)">
<summary>
 Validates transaction ID patterns for potential issues
</summary>
</member>
<member name="M:LoanRules.DataMismatch.validateCurrencyContext(System.String,System.Decimal)">
<summary>
 Validates currency against region and amount expectations
</summary>
</member>
<member name="M:LoanRules.DataMismatch.detectSuspiciousAmountPatterns(System.Decimal)">
<summary>
 Detects suspicious amount patterns
</summary>
</member>
<member name="T:LoanRules.DataMismatch">
<summary>
 Module for data mismatch detection and validation
</summary>
</member>
<member name="M:LoanRules.Authenticity.createAuditLogEntry(LoanRules.Types.AuthenticatedPayload,Microsoft.FSharp.Core.FSharpResult{LoanRules.Types.AuthenticatedPayload,System.String})">
<summary>
 Creates an audit log entry for the authentication attempt
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateTransactionAuthenticity(LoanRules.Types.AuthenticatedPayload,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},System.Boolean)">
<summary>
 Comprehensive authenticity validation
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateRequestTiming(LoanRules.Types.AuthenticatedPayload)">
<summary>
 Validates request timing to prevent replay attacks (requires strict timing)
</summary>
</member>
<member name="M:LoanRules.Authenticity.generateRequestFingerprint(LoanRules.Types.AuthenticatedPayload)">
<summary>
 Generates a fingerprint for the request based on multiple factors
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateUserAgent(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Validates User-Agent header for known patterns
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateClientIP(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}})">
<summary>
 Validates client IP address format and optionally against whitelist
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateStrictTimestampFreshness(System.String)">
<summary>
 Validates strict timestamp freshness (5 minutes window for production)
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateRequestIdFormat(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Validates request ID format (alphanumeric with hyphens/underscores, 8-64 chars)
</summary>
</member>
<member name="M:LoanRules.Authenticity.validateNonceFormat(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Validates nonce format (UUID or 32+ hex characters)
</summary>
</member>
<member name="T:LoanRules.Authenticity">
<summary>
 Module for transaction authenticity validation
</summary>
</member>
<member name="M:LoanRules.Integrity.validatePayloadIntegrity(LoanRules.Types.WebhookPayload,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.String)">
<summary>
 Comprehensive integrity validation
</summary>
</member>
<member name="M:LoanRules.Integrity.validateHmacSignature(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.String)">
<summary>
 Validates HMAC signature if provided
</summary>
</member>
<member name="M:LoanRules.Integrity.computeHmacSignature(System.String,System.String)">
<summary>
 Computes HMAC-SHA256 signature for payload integrity
</summary>
</member>
<member name="M:LoanRules.Integrity.validatePayloadSize(System.String)">
<summary>
 Validates payload size constraints
</summary>
</member>
<member name="M:LoanRules.Integrity.validateAmountPrecision(System.Decimal)">
<summary>
 Validates that the amount has reasonable precision (max 2 decimal places)
</summary>
</member>
<member name="M:LoanRules.Integrity.validateTransactionIdFormat(System.String)">
<summary>
 Validates transaction ID format (alphanumeric plus hyphens/underscores, 3-50 characters)
</summary>
</member>
<member name="M:LoanRules.Integrity.validateTimestampFreshness(System.String)">
<summary>
 Validates that the timestamp is not too old (within last 24 hours for testing)
</summary>
</member>
<member name="T:LoanRules.Integrity">
<summary>
 Module for payload integrity validation
</summary>
</member>
<member name="M:LoanRules.Validation.validatePayload(LoanRules.Types.WebhookPayload)">
<summary>
 Validates all aspects of a webhook payload
</summary>
</member>
<member name="M:LoanRules.Validation.validateTimestamp(System.String)">
<summary>
 Validates that the timestamp is in a valid format
</summary>
</member>
<member name="M:LoanRules.Validation.validateCurrency(System.String)">
<summary>
 Validates that the currency is supported
</summary>
</member>
<member name="M:LoanRules.Validation.validateAmount(System.Decimal)">
<summary>
 Validates that the amount is positive
</summary>
</member>
<member name="M:LoanRules.Validation.validateEventType(System.String)">
<summary>
 Validates that the event type is supported
</summary>
</member>
<member name="T:LoanRules.Validation">
<summary>
 Module for validating webhook payloads
</summary>
</member>
<member name="T:LoanRules.Types.MismatchResult">
<summary>
 Data mismatch detection result
</summary>
</member>
<member name="T:LoanRules.Types.AuthenticatedPayload">
<summary>
 Extended payload with authenticity metadata
</summary>
</member>
<member name="T:LoanRules.Types.WebhookPayload">
<summary>
 Represents a payment webhook payload
</summary>
</member>
<member name="T:LoanRules.Types">
<summary>
 Module containing types for the webhook payload
</summary>
</member>
</members>
</doc>
